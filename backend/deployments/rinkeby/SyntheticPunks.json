{
  "address": "0x414687A002918F0D9822234FAe93D950d6e8e773",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_spritesheetImageData",
          "type": "string"
        },
        {
          "internalType": "uint256[4][9]",
          "name": "_spritesheetRanges",
          "type": "uint256[4][9]"
        },
        {
          "internalType": "string",
          "name": "_attributesContentURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ensReverseAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_getAttributes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "_tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attributesContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claimOther",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "layers",
          "type": "uint256[]"
        }
      ],
      "name": "generatePunkSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_attributeId",
          "type": "uint256"
        }
      ],
      "name": "getAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttributeCategories",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttributes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getGender",
      "outputs": [
        {
          "internalType": "enum SyntheticPunks.Gender",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "getMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "randomUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spritesheetImageData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "spritesheetRanges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "value",
          "type": "bytes32"
        }
      ],
      "name": "toString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6c0d25f3719b301df90e4502f205917d7e99919b7fe6b7cb632ef6fd61fe234",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x414687A002918F0D9822234FAe93D950d6e8e773",
    "transactionIndex": 31,
    "gasUsed": "13701775",
    "logsBloom": "0x
    "blockHash": "0x75df526cea974b4e9df3dc4bacf10b6f10250b9c86150ae02e06fbffe578d887",
    "transactionHash": "0xc6c0d25f3719b301df90e4502f205917d7e99919b7fe6b7cb632ef6fd61fe234",
    "logs": [],
    "blockNumber": 10160851,
    "cumulativeGasUsed": "25248236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Secret Project",
    "sPROJ",
    "data:image/png;charset:utf-8;base64,",
    [
      [
        0,
        7,
        7,
        11
      ],
      [
        11,
        15,
        15,
        19
      ],
      [
        19,
        22,
        22,
        25
      ],
      [
        25,
        27,
        27,
        30
      ],
      [
        30,
        42,
        42,
        42
      ],
      [
        42,
        67,
        67,
        106
      ],
      [
        106,
        110,
        110,
        114
      ],
      [
        114,
        127,
        127,
        142
      ],
      [
        142,
        143,
        143,
        144
      ]
    ],
    "ipfs://Qme48gVnyWfQpByBy3RxBqvXZe4H2q8RBsPFyXrZPaNWXp",
    "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "0x196eC7109e127A353B709a20da25052617295F6f"
  ],
  "numDeployments": 3,
  "solcInputHash": "057ad78e465abf8e0b485c1388a07089",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_spritesheetImageData\",\"type\":\"string\"},{\"internalType\":\"uint256[4][9]\",\"name\":\"_spritesheetRanges\",\"type\":\"uint256[4][9]\"},{\"internalType\":\"string\",\"name\":\"_attributesContentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensReverseAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_getAttributes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attributesContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimOther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"layers\",\"type\":\"uint256[]\"}],\"name\":\"generatePunkSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attributeId\",\"type\":\"uint256\"}],\"name\":\"getAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttributeCategories\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttributes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getGender\",\"outputs\":[{\"internalType\":\"enum SyntheticPunks.Gender\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"randomUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spritesheetImageData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spritesheetRanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticPunks.sol\":\"SyntheticPunks\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/SyntheticPunks.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n//  ______     __  __     __   __     ______   __  __     ______     ______   __     ______        ______   __  __     __   __     __  __     ______    \\n// /\\\\  ___\\\\   /\\\\ \\\\_\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\   /\\\\  ___\\\\   /\\\\__  _\\\\ /\\\\ \\\\   /\\\\  ___\\\\      /\\\\  == \\\\ /\\\\ \\\\/\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\/ /    /\\\\  ___\\\\   \\n// \\\\ \\\\___  \\\\  \\\\ \\\\____ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\  __ \\\\  \\\\ \\\\  __\\\\   \\\\/_/\\\\ \\\\/ \\\\ \\\\ \\\\  \\\\ \\\\ \\\\____     \\\\ \\\\  _-/ \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\  _\\\"-.  \\\\ \\\\___  \\\\  \\n//  \\\\/\\\\_____\\\\  \\\\/\\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\     \\\\ \\\\_\\\\    \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\/\\\\_____\\\\ \\n//   \\\\/_____/   \\\\/_____/   \\\\/_/ \\\\/_/     \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/     \\\\/_/   \\\\/_/   \\\\/_____/      \\\\/_/     \\\\/_____/   \\\\/_/ \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/ \\n                                                                                                                                                     \\n\\n// ................................................................................\\n// .....................................,,,........................................\\n// ...............................,,,,,,,,,,,,,,,..................................\\n// ............................,7777777777777777777,...............................\\n// .........................,,,,7777777777777777777,,,,............................\\n// ......................,,,,777~~~~~~~~~~~~~~~~~~~777,,,..........................\\n// ....................,,,,,:777,,,,,,,,,,,,,,,,,,,III:,,,,,.......................\\n// ..................,,,,=III~~~,,,,,,,,,,,,,,,,,,,~~~III=,,,,.....................\\n// .................,,,,,=III:::::::::::::::::::::::::III=,,,,,....................\\n// ................,,,777777777777777777777777777777777777777,,,...................\\n// ...............,,,,777777777777777777777777777777777777777,,,...................\\n// ................,,,777777777777777777777777777777777777777,,,...................\\n// ................,,,777777777777777777777777777777777777777,,,...................\\n// ................,,,===?II?=~~~~~~~~~~~~~~~~~~~~~~~~777+~~~,,,...................\\n// ................,,,,,,?III::,,,,,,,,,,,,,,,,,,,,,::777=,,,,,....................\\n// .................,,,,,IIII,,,,,,,,,,,,,,,,,,,,,,,,,777=,,,,,....................\\n// .................,,,,,I77I,,,,,..............,,,,,,777=,,,,.....................\\n// .................,,777===~,,,,................,,,,,777=,,,......................\\n// .................,,777~,,,,,,..................,,,,777=,,.......................\\n// .................,,777~,,,,,,777.............7II,,,777=,,.......................\\n// .................,,777~,,,,,,777,............777,,,777=,,.......................\\n// .................,,777?777,,,===,............===,,,777=,,.......................\\n// .................,,777?777,,,.................,,,,,777=,,.......................\\n// .................,,=+=+777,,,.................,,,,,777=,,.......................\\n// ..................,,,,+777,,,.................,,,,,777=,,.......................\\n// ..................,,,,+777,,,.........=777....,,,,,777=,,.......................\\n// ...................,,,=777,,,.........+777..,,,,,,,777=,,.......................\\n// ...................,,,+777,,,,.......,~++=,,,,,,,,,777=,,.......................\\n// ....................,,+777,,,,.....,,,,,,,,,,,,,,,,777=,,.......................\\n// .....................,=777,,,,,,,,,I777777777,,,,,,777=,........................\\n// .....................,+777,,,,,,,,,I777777777,,,,,,777=,........................\\n// .....................,=+++~~~,,,,,,=+++++++++,,,~~~+++~.........................\\n// ......................,,,:777,,,,,,,,,,,,,,,,,,,777:,,..........................\\n// ......................,,,:777,,,:::,,,,,,,,,,:::III:,...........................\\n// ......................,,,:777,,,777:,,,,,,,,:777,,,.............................\\n// ......................,,,:777,,,777~,,,,,,,,:777,,,.............................\\n// ......................,,,:777,,,,,,III?77?777,,,,...............................\\n// ......................,,,:777,,,,,,III?77?77I,,,,...............................\\n// .......................,,:777,,,,,,,,,:77?,,,,,.................................\\n// .......................,,,777,,,,,,,,,:77?,,,,..................................\\n// .........................,???,,,,,,,,,:??=,,,...................................\\n// ............................,.........,,,.,.....................................\\n// ................................................................................\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\n\\nabstract contract ReverseRecords {\\n  function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\\n}\\n\\ncontract SyntheticPunks is ERC721 {\\n\\n  // TODO: Check if constants are cheaper\\n  string public spritesheetImageData;\\n  uint256[4][9] public spritesheetRanges;\\n  uint256 public immutable claimPrice = 0.02 ether;\\n  string public attributesContentURI; // For use by third parties to display \\n  address public immutable withdrawAddress;\\n  address immutable ensReverseAddress;\\n  string public constant claimMessage = \\\"Message to claim Synthetic Punk\\\";\\n\\n  mapping(address => bool) public claimed;\\n\\n  enum Gender { Male, Female }\\n\\n  constructor(\\n    string memory _name, \\n    string memory _symbol, \\n    string memory _spritesheetImageData, \\n    uint256[4][9] memory _spritesheetRanges,\\n    string memory _attributesContentURI,\\n    address _withdrawAddress,\\n    address _ensReverseAddress\\n  ) ERC721(_name, _symbol) {\\n    spritesheetImageData = _spritesheetImageData;\\n    spritesheetRanges = _spritesheetRanges;\\n    attributesContentURI = _attributesContentURI;\\n    withdrawAddress = _withdrawAddress;\\n    ensReverseAddress = _ensReverseAddress;\\n  }\\n\\n  function claim() public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    _safeMint(msg.sender, getTokenID(msg.sender));\\n    claimed[msg.sender] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(msg.sender).transfer(refund);\\n    }\\n  }\\n\\n  function claimOther(address _signer, bytes memory _signature) public payable {\\n    require(msg.value >= claimPrice, \\\"Insufficient payment\\\");\\n    require(verify(_signer, claimMessage, _signature), \\\"Invalid signature\\\");\\n\\n    _safeMint(msg.sender, getTokenID(_signer));\\n    claimed[_signer] = true;\\n    uint256 refund = msg.value - claimPrice;\\n    if (refund > 0) {\\n      payable(_signer).transfer(refund);\\n    }\\n  }\\n\\n  \\n\\n  function withdraw() public {\\n    payable(withdrawAddress).transfer(address(this).balance);\\n  }\\n\\n  function _tokenURI(address _address) public view returns (string memory) {\\n    return tokenURI(getTokenID(_address));\\n  }\\n\\n  function getTokenID(address _address) public pure returns (uint256) {\\n    return uint256(uint160(_address));\\n  }\\n\\n  function getAddress(uint256 id) public pure returns (address) {\\n    return address(uint160(id));\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    uint256[] memory layers = getAttributes(id);\\n    string memory punkSVG = generatePunkSVG(layers);\\n\\n    address userAddress = getAddress(id);\\n    string memory ensName = reverseName(userAddress);  \\n    string memory addressOrENS = bytes(ensName).length == 0 ? toString(userAddress) : ensName;\\n    \\n    string memory json = base64(bytes(abi.encodePacked('{\\\"name\\\": \\\"', 'Synthetic CryptoPunk for ', addressOrENS, '\\\", \\\"description\\\": \\\"This is a unique Punk claimed by ', addressOrENS,'.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', base64(bytes(punkSVG)), '\\\"}')));\\n\\n    return string(abi.encodePacked('data:application/json;base64,', json));\\n  }\\n\\n  // Entropy 0\\n  function getGender(uint256 id) public view returns (Gender) {\\n    return randomUint(id, 0) % 2 == 0 ? Gender.Male : Gender.Female;\\n  }\\n\\n  // Entropy 1,2-9\\n  function getAttributeCategories(uint256 id) public view returns (uint256[] memory) {\\n    uint256 checks = 2 + randomUint(id, 1) % (spritesheetRanges.length - 3); // Number of bytes to check\\n    uint256[] memory attributes = new uint256[](checks); // TODO: Check at least 1 attribute\\n    uint256 length = 0;\\n    for (uint256 i; i < checks; i++) {\\n      uint256 newAttribute = randomUint(id, 2+i) % (spritesheetRanges.length - 2) + 1; // Skip base category\\n      \\n      bool added = contains(attributes, newAttribute);\\n\\n      if (added) {\\n        continue;\\n      }\\n\\n      if (getGender(id) == Gender.Female) {\\n        if (!(spritesheetRanges[newAttribute][3] - spritesheetRanges[newAttribute][1] == 0)) {\\n          attributes[length] = newAttribute;\\n          length++;\\n        }\\n      } else {\\n        if (!(spritesheetRanges[newAttribute][2] - spritesheetRanges[newAttribute][0] == 0)) {\\n          attributes[length] = newAttribute;\\n          length++;\\n        }\\n      }\\n    }\\n\\n    uint256[] memory attributesResized = new uint256[](length+1);\\n    attributesResized[0] = 0;\\n    for (uint256 i; i < length; i++) {\\n      attributesResized[i+1] = attributes[i];\\n    }\\n\\n    return attributesResized;\\n  }\\n\\n  // Entropy 10\\n  function getAttribute(uint256 id, uint256 _attributeId) public view returns (uint256) {\\n    uint256[4] memory ranges = spritesheetRanges[_attributeId];\\n    Gender gender = getGender(id);\\n    if (gender == Gender.Female) {\\n      return ranges[1] + randomUint(id, 10+_attributeId) % (ranges[3] - ranges[1]);\\n    } else {\\n      return ranges[0] + randomUint(id, 10+_attributeId) % (ranges[2] - ranges[0]);\\n    }\\n  }\\n\\n  function _getAttributes(address _address) public view returns (uint256[] memory) {\\n    return getAttributes(getTokenID(_address));\\n  }\\n\\n  function getAttributes(uint256 id) public view returns (uint256[] memory) {\\n    uint256[] memory attributeCategories = getAttributeCategories(id);\\n    uint256[] memory layers = new uint256[](attributeCategories.length);\\n    for (uint256 i = 0; i < attributeCategories.length; i++) {\\n      layers[i] = getAttribute(id, attributeCategories[i]);\\n    }\\n    return layers;\\n  }\\n\\n  function generatePunkSVG(uint256[] memory layers) public view returns (string memory) {\\n    string memory start1 = '<svg viewBox=\\\"0 0 24 24\\\" width=\\\"1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ><defs><style>#spritesheet { image-rendering: -webkit-optimize-contrast; image-rendering: crisp-edges; image-rendering: pixelated; } #punk { filter: drop-shadow(0px 0px 50px rgb(0, 255, 166, 0.7)); } svg { background : #6A9480; }</style><svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"48 0 24 24\\\"><image id=\\\"spritesheet\\\" preserveAspectRatio=\\\"xMinYMin slice\\\" href=\\\"';\\n    string memory start3 = '\\\"></image></svg></defs><svg id=\\\"punk\\\">';\\n    string memory end = '</svg></svg>';\\n    string memory layersSVG = '';\\n\\n    // Render in order\\n    for (uint256 i = 0; i < spritesheetRanges.length; i++) {\\n      for (uint256 j = 0; j < layers.length; j++) {\\n        if (spritesheetRanges[i][0] <= layers[j] && layers[j] < spritesheetRanges[i][3]) { // if layer is in range\\n          // console.log(layers[j]);\\n          uint256 id = layers[j];\\n          uint256 x = (id % 24) * 24;\\n          uint256 y = (id / 24) * 24;\\n          layersSVG = string(abi.encodePacked(layersSVG, '<svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"', toString(x), ' ', toString(y), ' 24 24\\\"><use href=\\\"#spritesheet\\\"></use></svg>'));\\n          break;\\n        }\\n      }\\n    }\\n\\n    return string(abi.encodePacked(start1, spritesheetImageData, start3, layersSVG, end)) ;\\n  }\\n  \\n  function reverseName(address _address) internal view returns (string memory name) {\\n    if (address(0) == ensReverseAddress) {\\n      return name;\\n    }\\n    ReverseRecords ens = ReverseRecords(ensReverseAddress);\\n    address[] memory t = new address[](1);\\n    t[0] = _address;\\n    name = ens.getNames(t)[0];\\n  }\\n\\n  function contains(uint256[] memory arr, uint256 element) internal pure returns (bool) {\\n    for (uint256 i = 0; i < arr.length; i++) {\\n      if (arr[i] == element) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function randomUint(uint256 seed, uint256 offset) public view returns (uint256) {\\n    require(offset < 32, \\\"Offset out of bounds\\\");\\n    bytes32 entropy = keccak256(abi.encodePacked(address(this), seed)); // TODO: Consider not including address in entropy\\n    bytes32 mask = bytes32(0xff << (offset * 8));\\n    uint256 out = uint256((entropy & mask) >> (offset * 8));\\n    return out;\\n  }\\n\\n  function toString(address account) public pure returns(string memory) {\\n    return toString(abi.encodePacked(account));\\n  }\\n\\n  function toString(bytes32 value) public pure returns(string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes memory data) public pure returns(string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint i = 0; i < data.length; i++) {\\n        str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\n        str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function toString(uint256 n) \\n      internal \\n      pure \\n      returns (string memory nstr) \\n  {\\n    uint256 MAX_UINT256_STRING_LENGTH = 78;\\n    uint8 ASCII_DIGIT_OFFSET = 48;\\n    if (n == 0) {\\n        return \\\"0\\\";\\n    }\\n    // Overallocate memory\\n    nstr = new string(MAX_UINT256_STRING_LENGTH);\\n    uint256 k = MAX_UINT256_STRING_LENGTH;\\n    // Populate string from right to left (lsb to msb).\\n    while (n != 0) {\\n      assembly {\\n        let char := add(\\n          ASCII_DIGIT_OFFSET,\\n          mod(n, 10)\\n        )\\n        mstore(add(nstr, k), char)\\n        k := sub(k, 1)\\n        n := div(n, 10)\\n      }\\n    }\\n    assembly {\\n      // Shift pointer over to actual start of string.\\n      nstr := add(nstr, k)\\n      // Store actual string length.\\n      mstore(nstr, sub(MAX_UINT256_STRING_LENGTH, k))\\n    }\\n    return nstr;\\n  }\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function base64(bytes memory data) internal pure returns (string memory) {\\n    bytes memory TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n          mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n          mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n\\n  // ECDSA\\n\\n  function getMessageHash(\\n    string memory _message\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_message));\\n  }\\n\\n  function getEthSignedMessageHash(bytes32 _messageHash)\\n    public\\n    pure \\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n      );\\n  }\\n\\n  function verify(\\n    address _signer,\\n    string memory _message,\\n    bytes memory signature\\n  ) public pure returns (bool) {\\n    bytes32 messageHash = getMessageHash(_message);\\n    bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n    return recoverSigner(ethSignedMessageHash, signature) == _signer;\\n  }\\n\\n  function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n    public\\n    pure\\n    returns (address)\\n  {\\n    (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n    return ecrecover(_ethSignedMessageHash, v, r, s);\\n  }\\n\\n  function splitSignature(bytes memory sig)\\n    public\\n    pure\\n    returns (\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    )\\n  {\\n    require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n    assembly {\\n      // first 32 bytes, after the length prefix\\n      r := mload(add(sig, 32))\\n      // second 32 bytes\\n      s := mload(add(sig, 64))\\n      // final byte (first byte of the next 32 bytes)\\n      v := byte(0, mload(add(sig, 96)))\\n    }\\n  }\\n}\",\"keccak256\":\"0x4b59e6b2d46952767a4b7eda615dff765f29119943281818082c495fdc8960b5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405266470de4df8200006080908152503480156200001f57600080fd5b5060405162005fec38038062005fec833981810160405281019062000045919062000499565b868681600090805190602001906200005f9291906200013c565b508060019080519060200190620000789291906200013c565b5050508460069080519060200190620000939291906200013c565b50836007906009620000a7929190620001cd565b5082602b9080519060200190620000c09291906200013c565b508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050505050620007a3565b8280546200014a90620006db565b90600052602060002090601f0160209004810192826200016e5760008555620001ba565b82601f106200018957805160ff1916838001178555620001ba565b82800160010185558215620001ba579182015b82811115620001b95782518255916020019190600101906200019c565b5b509050620001c9919062000225565b5090565b826009600402810192821562000212579160200282015b8281111562000211578251829060046200020092919062000244565b5091602001919060040190620001e4565b5b50905062000221919062000289565b5090565b5b808211156200024057600081600090555060010162000226565b5090565b826004810192821562000276579160200282015b828111156200027557825182559160200191906001019062000258565b5b50905062000285919062000225565b5090565b5b80821115620002ad5760008181620002a39190620002b1565b506004016200028a565b5090565b5060008155600101600081556001016000815560010160009055565b6000620002e4620002de84620005e2565b620005ae565b90508082856080860282011115620002fb57600080fd5b60005b858110156200032f57816200031488826200042b565b845260208401935060808301925050600181019050620002fe565b5050509392505050565b6000620003506200034a846200060b565b620005ae565b905080828560208602820111156200036757600080fd5b60005b858110156200039b578162000380888262000482565b8452602084019350602083019250506001810190506200036a565b5050509392505050565b6000620003bc620003b68462000634565b620005ae565b905082815260208101848484011115620003d557600080fd5b620003e2848285620006a5565b509392505050565b600081519050620003fb816200076f565b92915050565b600082601f8301126200041357600080fd5b600962000422848285620002cd565b91505092915050565b600082601f8301126200043d57600080fd5b60046200044c84828562000339565b91505092915050565b600082601f8301126200046757600080fd5b815162000479848260208601620003a5565b91505092915050565b600081519050620004938162000789565b92915050565b6000806000806000806000610540888a031215620004b657600080fd5b600088015167ffffffffffffffff811115620004d157600080fd5b620004df8a828b0162000455565b975050602088015167ffffffffffffffff811115620004fd57600080fd5b6200050b8a828b0162000455565b965050604088015167ffffffffffffffff8111156200052957600080fd5b620005378a828b0162000455565b95505060606200054a8a828b0162000401565b9450506104e088015167ffffffffffffffff8111156200056957600080fd5b620005778a828b0162000455565b9350506105006200058b8a828b01620003ea565b9250506105206200059f8a828b01620003ea565b91505092959891949750929550565b6000604051905081810181811067ffffffffffffffff82111715620005d857620005d762000740565b5b8060405250919050565b600067ffffffffffffffff8211156200060057620005ff62000740565b5b602082029050919050565b600067ffffffffffffffff82111562000629576200062862000740565b5b602082029050919050565b600067ffffffffffffffff82111562000652576200065162000740565b5b601f19601f8301169050602081019050919050565b600062000674826200067b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620006c5578082015181840152602081019050620006a8565b83811115620006d5576000848401525b50505050565b60006002820490506001821680620006f457607f821691505b602082108114156200070b576200070a62000711565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200077a8162000667565b81146200078657600080fd5b50565b62000794816200069b565b8114620007a057600080fd5b50565b60805160a05160601c60c05160601c6157e962000803600039600081816134b70152613513015260008181610df40152611361015260008181610e18015281816116690152818161173801528181612a770152612bc501526157e96000f3fe6080604052600436106102465760003560e01c80637685945e11610139578063b11a19e8116100b6578063c884ef831161007a578063c884ef8314610948578063d61b051b14610985578063e06d2eb5146109c2578063e985e9c5146109ff578063fa54080114610a3c578063fe0bc60014610a7957610246565b8063b11a19e81461082b578063b446f3b214610868578063b88d4fde146108a5578063b93f9b0a146108ce578063c87b56dd1461090b57610246565b806397aba7f9116100fd57806397aba7f91461072d5780639d4776b21461076a578063a22cb46514610786578063a7bb5803146107af578063af4fb353146107ee57610246565b80637685945e1461060e57806378619bdf1461064b578063801bf7011461068857806385d940ec146106c557806395d89b411461070257610246565b80633ccfd60b116101c757806360787be31161018b57806360787be3146104ef5780636352211e1461051a57806363f8071c1461055757806370a082311461059457806371aad10d146105d157610246565b80633ccfd60b1461042b57806342842e0e146104425780634378a6e31461046b5780634e71d92d146104a857806356ca623e146104b257610246565b806315d655c91161020e57806315d655c914610344578063221ed3ae1461036f57806323b872dd1461039a5780632dd34f0f146103c35780633b85df721461040057610246565b806301ffc9a71461024b57806306fdde0314610288578063081812fc146102b3578063095ea7b3146102f05780631581b60014610319575b600080fd5b34801561025757600080fd5b50610272600480360381019061026d919061411a565b610ab6565b60405161027f9190614d4b565b60405180910390f35b34801561029457600080fd5b5061029d610b48565b6040516102aa9190614e18565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d591906141ee565b610bd6565b6040516102e79190614c56565b60405180910390f35b3480156102fc57600080fd5b5061031760048036038101906103129190613fdf565b610c09565b005b34801561032557600080fd5b5061032e610df2565b60405161033b9190614c56565b60405180910390f35b34801561035057600080fd5b50610359610e16565b6040516103669190614f5a565b60405180910390f35b34801561037b57600080fd5b50610384610e3a565b6040516103919190614e18565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc9190613e06565b610ec8565b005b3480156103cf57600080fd5b506103ea60048036038101906103e59190613f60565b6112c8565b6040516103f79190614d4b565b60405180910390f35b34801561040c57600080fd5b50610415611326565b6040516104229190614e18565b60405180910390f35b34801561043757600080fd5b5061044061135f565b005b34801561044e57600080fd5b5061046960048036038101906104649190613e06565b6113c8565b005b34801561047757600080fd5b50610492600480360381019061048d91906141ee565b61152b565b60405161049f9190614d29565b60405180910390f35b6104b0611667565b005b3480156104be57600080fd5b506104d960048036038101906104d49190613da1565b6117b8565b6040516104e69190614e18565b60405180910390f35b3480156104fb57600080fd5b506105046117e9565b6040516105119190614e18565b60405180910390f35b34801561052657600080fd5b50610541600480360381019061053c91906141ee565b611877565b60405161054e9190614c56565b60405180910390f35b34801561056357600080fd5b5061057e60048036038101906105799190613da1565b6118aa565b60405161058b9190614f5a565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190613da1565b6118ca565b6040516105c89190614f5a565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f3919061416c565b6118e2565b6040516106059190614e18565b60405180910390f35b34801561061a57600080fd5b5061063560048036038101906106309190614217565b611d32565b6040516106429190614f5a565b60405180910390f35b34801561065757600080fd5b50610672600480360381019061066d919061405c565b61202c565b60405161067f9190614e18565b60405180910390f35b34801561069457600080fd5b506106af60048036038101906106aa9190614217565b61236c565b6040516106bc9190614f5a565b60405180910390f35b3480156106d157600080fd5b506106ec60048036038101906106e791906141ee565b61239a565b6040516106f99190614d29565b60405180910390f35b34801561070e57600080fd5b50610717612978565b6040516107249190614e18565b60405180910390f35b34801561073957600080fd5b50610754600480360381019061074f91906140c6565b612a06565b6040516107619190614c56565b60405180910390f35b610784600480360381019061077f9190613f0c565b612a75565b005b34801561079257600080fd5b506107ad60048036038101906107a89190613ed0565b612c47565b005b3480156107bb57600080fd5b506107d660048036038101906107d1919061416c565b612d44565b6040516107e593929190614d81565b60405180910390f35b3480156107fa57600080fd5b5061081560048036038101906108109190613da1565b612dac565b6040516108229190614e18565b60405180910390f35b34801561083757600080fd5b50610852600480360381019061084d919061409d565b612dc6565b60405161085f9190614e18565b60405180910390f35b34801561087457600080fd5b5061088f600480360381019061088a91906141ad565b612df7565b60405161089c9190614d66565b60405180910390f35b3480156108b157600080fd5b506108cc60048036038101906108c79190613e55565b612e27565b005b3480156108da57600080fd5b506108f560048036038101906108f091906141ee565b612f8d565b6040516109029190614c56565b60405180910390f35b34801561091757600080fd5b50610932600480360381019061092d91906141ee565b612f97565b60405161093f9190614e18565b60405180910390f35b34801561095457600080fd5b5061096f600480360381019061096a9190613da1565b61304e565b60405161097c9190614d4b565b60405180910390f35b34801561099157600080fd5b506109ac60048036038101906109a79190614217565b61306e565b6040516109b99190614f5a565b60405180910390f35b3480156109ce57600080fd5b506109e960048036038101906109e491906141ee565b61311d565b6040516109f69190614dfd565b60405180910390f35b348015610a0b57600080fd5b50610a266004803603810190610a219190613dca565b61314d565b604051610a339190614d4b565b60405180910390f35b348015610a4857600080fd5b50610a636004803603810190610a5e919061409d565b61317c565b604051610a709190614d66565b60405180910390f35b348015610a8557600080fd5b50610aa06004803603810190610a9b9190613da1565b6131ac565b604051610aad9190614d29565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b1157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610b415750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008054610b559061532f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b819061532f565b8015610bce5780601f10610ba357610100808354040283529160200191610bce565b820191906000526020600020905b815481529060010190602001808311610bb157829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610d015750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610d40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3790614f1a565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b602b8054610e479061532f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e739061532f565b8015610ec05780601f10610e9557610100808354040283529160200191610ec0565b820191906000526020600020905b815481529060010190602001808311610ea357829003601f168201915b505050505081565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090614f3a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd090614e5a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061107157506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806111025750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890614f1a565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000806112d484612df7565b905060006112e18261317c565b90508573ffffffffffffffffffffffffffffffffffffffff166113048286612a06565b73ffffffffffffffffffffffffffffffffffffffff1614925050509392505050565b6040518060400160405280601f81526020017f4d65737361676520746f20636c61696d2053796e7468657469632050756e6b0081525081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156113c5573d6000803e3d6000fd5b50565b6113d3838383610ec8565b60008273ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c5114806114e7575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b815260040161147493929190614cbd565b602060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c69190614143565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151d90614e9a565b60405180910390fd5b505050565b606060006115388361239a565b90506000815167ffffffffffffffff81111561157d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115ab5781602001602082028036833780820191505090505b50905060005b825181101561165c57611604858483815181106115f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611d32565b82828151811061163d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061165490615361565b9150506115b1565b508092505050919050565b7f00000000000000000000000000000000000000000000000000000000000000003410156116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190614e7a565b60405180910390fd5b6116dc336116d7336118aa565b6131c6565b6001602c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f0000000000000000000000000000000000000000000000000000000000000000346117629190615209565b905060008111156117b5573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156117b3573d6000803e3d6000fd5b505b50565b60606117e2826040516020016117ce9190614a90565b6040516020818303038152906040526118e2565b9050919050565b600680546117f69061532f565b80601f01602080910402602001604051908101604052809291908181526020018280546118229061532f565b801561186f5780601f106118445761010080835404028352916020019161186f565b820191906000526020600020905b81548152906001019060200180831161185257829003601f168201915b505050505081565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff169050919050565b60026020528060005260406000206000915090505481565b606060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060006002845161192e91906151af565b600261193a9190615128565b67ffffffffffffffff811115611979577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119ab5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611a09577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b8451811015611d2757826004868381518110611b0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110611b76577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b82600283611b8f91906151af565b6002611b9b9190615128565b81518110611bd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868381518110611c40577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b1660f81c60ff1681518110611c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b82600283611ca291906151af565b6003611cae9190615128565b81518110611ce5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080611d1f90615361565b915050611ac5565b508092505050919050565b60008060078360098110611d6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60040201600480602002604051908101604052809291908260048015611daa576020028201915b815481526020019060010190808311611d96575b505050505090506000611dbc8561311d565b9050600180811115611df7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816001811115611e30577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611f305781600160048110611e70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600360048110611eaf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611ebe9190615209565b611ed48686600a611ecf9190615128565b61306e565b611ede91906153e2565b82600160048110611f18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611f279190615128565b92505050612026565b81600060048110611f6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015182600260048110611fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151611fb89190615209565b611fce8686600a611fc99190615128565b61306e565b611fd891906153e2565b82600060048110612012577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516120219190615128565b925050505b92915050565b60606000604051806101e001604052806101aa815260200161560a6101aa9139905060006040518060600160405280602681526020016155e460269139905060006040518060400160405280600c81526020017f3c2f7376673e3c2f7376673e00000000000000000000000000000000000000008152509050600060405180602001604052806000815250905060005b60098110156123375760005b87518110156123235787818151811061210a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516007836009811061214c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60040201600060048110612189577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0154111580156122505750600782600981106121ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004020160036004811061220b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0154888281518110612246577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151105b15612310576000888281518110612290577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000601880836122aa91906153e2565b6122b491906151af565b90506000601880846122c6919061517e565b6122d091906151af565b9050856122dc83613328565b6122e583613328565b6040516020016122f793929190614b54565b6040516020818303038152906040529550505050612323565b808061231b90615361565b9150506120c8565b50808061232f90615361565b9150506120bc565b50836006848385604051602001612352959493929190614b09565b604051602081830303815290604052945050505050919050565b6007826009811061237c57600080fd5b60040201816004811061238e57600080fd5b01600091509150505481565b60606000600360096123ac9190615209565b6123b784600161306e565b6123c191906153e2565b60026123cd9190615128565b905060008167ffffffffffffffff811115612411577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561243f5781602001602082028036833780820191505090505b5090506000805b838110156127f35760006001600260096124609190615209565b612476898560026124719190615128565b61306e565b61248091906153e2565b61248a9190615128565b905060006124988583613431565b905080156124a75750506127e0565b6001808111156124e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6124e98961311d565b6001811115612521577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561268457600060078360098110612563577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600402016001600481106125a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b0154600784600981106125dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60040201600360048110612619577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01546126259190615209565b1461267f5781858581518110612664577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050838061267b90615361565b9450505b6127dd565b6000600783600981106126c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600402016000600481106126fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b015460078460098110612739577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60040201600260048110612776577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01546127829190615209565b146127dc57818585815181106127c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505083806127d890615361565b9450505b5b50505b80806127eb90615361565b915050612446565b5060006001826128039190615128565b67ffffffffffffffff811115612842577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156128705781602001602082028036833780820191505090505b5090506000816000815181106128af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060005b8281101561296b578381815181106128ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826001836129159190615128565b8151811061294c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061296390615361565b9150506128be565b5080945050505050919050565b600180546129859061532f565b80601f01602080910402602001604051908101604052809291908181526020018280546129b19061532f565b80156129fe5780601f106129d3576101008083540402835291602001916129fe565b820191906000526020600020905b8154815290600101906020018083116129e157829003601f168201915b505050505081565b600080600080612a1585612d44565b92509250925060018682858560405160008152602001604052604051612a3e9493929190614db8565b6020604051602081039080840390855afa158015612a60573d6000803e3d6000fd5b50505060206040510351935050505092915050565b7f0000000000000000000000000000000000000000000000000000000000000000341015612ad8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612acf90614e7a565b60405180910390fd5b612b18826040518060400160405280601f81526020017f4d65737361676520746f20636c61696d2053796e7468657469632050756e6b00815250836112c8565b612b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4e90614e3a565b60405180910390fd5b612b6933612b64846118aa565b6131c6565b6001602c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060007f000000000000000000000000000000000000000000000000000000000000000034612bef9190615209565b90506000811115612c42578273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612c40573d6000803e3d6000fd5b505b505050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612d389190614d4b565b60405180910390a35050565b60008060006041845114612d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8490614eda565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6060612dbf612dba836118aa565b612f97565b9050919050565b6060612df082604051602001612ddc9190614ad7565b6040516020818303038152906040526118e2565b9050919050565b600081604051602001612e0a9190614af2565b604051602081830303815290604052805190602001209050919050565b612e32848484610ec8565b60008373ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c511480612f48575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b8152600401612ed59493929190614c71565b602060405180830381600087803b158015612eef57600080fd5b505af1158015612f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f279190614143565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b612f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7e90614e9a565b60405180910390fd5b50505050565b6000819050919050565b60606000612fa48361152b565b90506000612fb18261202c565b90506000612fbe85612f8d565b90506000612fcb826134b3565b9050600080825114612fdd5781612fe7565b612fe6836117b8565b5b9050600061301f8283612ff9886136f6565b60405160200161300b93929190614bcc565b6040516020818303038152906040526136f6565b9050806040516020016130329190614c34565b6040516020818303038152906040529650505050505050919050565b602c6020528060005260406000206000915054906101000a900460ff1681565b6000602082106130b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130aa90614eba565b60405180910390fd5b600030846040516020016130c8929190614aab565b60405160208183030381529060405280519060200120905060006008846130ef91906151af565b60ff901b60001b9050600060088561310791906151af565b828416901c60001c905080935050505092915050565b600080600261312d84600061306e565b61313791906153e2565b14613143576001613146565b60005b9050919050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008160405160200161318f9190614ba6565b604051602081830303815290604052805190602001209050919050565b60606131bf6131ba836118aa565b61152b565b9050919050565b6131d082826138bb565b60008273ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c5114806132e5575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161327293929190614cbd565b602060405180830381600087803b15801561328c57600080fd5b505af11580156132a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c49190614143565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b613324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331b90614e9a565b60405180910390fd5b5050565b60606000604e9050600060309050600084141561337e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509250505061342c565b8167ffffffffffffffff8111156133be577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156133f05781602001600182028036833780820191505090505b50925060008290505b6000851461341e57600a850682018082860152600182039150600a86049550506133f9565b808401935080830384525050505b919050565b600080600090505b83518110156134a7578284828151811061347c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114156134945760019150506134ad565b808061349f90615361565b915050613439565b50600090505b92915050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141561350f576136f1565b60007f000000000000000000000000000000000000000000000000000000000000000090506000600167ffffffffffffffff811115613577577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156135a55781602001602082028036833780820191505090505b50905083816000815181106135e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663cbf8b66c826040518263ffffffff1660e01b81526004016136569190614d07565b60006040518083038186803b15801561366e57600080fd5b505afa158015613682573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136ab919061401b565b6000815181106136e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151925050505b919050565b606060006040518060600160405280604081526020016155a4604091399050600083519050600081141561373d5760405180602001604052806000815250925050506138b6565b6000600360028361374e9190615128565b613758919061517e565b600461376491906151af565b905060006020826137759190615128565b67ffffffffffffffff8111156137b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137e65781602001600182028036833780820191505090505b5090506000849050600181016020830160005b868110156138725760038101905062ffffff818b015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b905080845260048401935050506137f9565b50600386066001811461388c576002811461389c576138a7565b613d3d60f01b60028303526138a7565b603d60f81b60018303525b50848452505081955050505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561392b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161392290614e5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146139cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139c490614efa565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000613ae1613adc84614fa6565b614f75565b9050808382526020820190508260005b85811015613b215781518501613b078882613d62565b845260208401935060208301925050600181019050613af1565b5050509392505050565b6000613b3e613b3984614fd2565b614f75565b90508083825260208201905082856020860282011115613b5d57600080fd5b60005b85811015613b8d5781613b738882613d8c565b845260208401935060208301925050600181019050613b60565b5050509392505050565b6000613baa613ba584614ffe565b614f75565b905082815260208101848484011115613bc257600080fd5b613bcd8482856152ed565b509392505050565b6000613be8613be38461502e565b614f75565b905082815260208101848484011115613c0057600080fd5b613c0b8482856152ed565b509392505050565b6000613c26613c218461502e565b614f75565b905082815260208101848484011115613c3e57600080fd5b613c498482856152fc565b509392505050565b600081359050613c6081615530565b92915050565b600082601f830112613c7757600080fd5b8151613c87848260208601613ace565b91505092915050565b600082601f830112613ca157600080fd5b8135613cb1848260208601613b2b565b91505092915050565b600081359050613cc981615547565b92915050565b600081359050613cde8161555e565b92915050565b600081359050613cf381615575565b92915050565b600081519050613d0881615575565b92915050565b600082601f830112613d1f57600080fd5b8135613d2f848260208601613b97565b91505092915050565b600082601f830112613d4957600080fd5b8135613d59848260208601613bd5565b91505092915050565b600082601f830112613d7357600080fd5b8151613d83848260208601613c13565b91505092915050565b600081359050613d9b8161558c565b92915050565b600060208284031215613db357600080fd5b6000613dc184828501613c51565b91505092915050565b60008060408385031215613ddd57600080fd5b6000613deb85828601613c51565b9250506020613dfc85828601613c51565b9150509250929050565b600080600060608486031215613e1b57600080fd5b6000613e2986828701613c51565b9350506020613e3a86828701613c51565b9250506040613e4b86828701613d8c565b9150509250925092565b60008060008060808587031215613e6b57600080fd5b6000613e7987828801613c51565b9450506020613e8a87828801613c51565b9350506040613e9b87828801613d8c565b925050606085013567ffffffffffffffff811115613eb857600080fd5b613ec487828801613d0e565b91505092959194509250565b60008060408385031215613ee357600080fd5b6000613ef185828601613c51565b9250506020613f0285828601613cba565b9150509250929050565b60008060408385031215613f1f57600080fd5b6000613f2d85828601613c51565b925050602083013567ffffffffffffffff811115613f4a57600080fd5b613f5685828601613d0e565b9150509250929050565b600080600060608486031215613f7557600080fd5b6000613f8386828701613c51565b935050602084013567ffffffffffffffff811115613fa057600080fd5b613fac86828701613d38565b925050604084013567ffffffffffffffff811115613fc957600080fd5b613fd586828701613d0e565b9150509250925092565b60008060408385031215613ff257600080fd5b600061400085828601613c51565b925050602061401185828601613d8c565b9150509250929050565b60006020828403121561402d57600080fd5b600082015167ffffffffffffffff81111561404757600080fd5b61405384828501613c66565b91505092915050565b60006020828403121561406e57600080fd5b600082013567ffffffffffffffff81111561408857600080fd5b61409484828501613c90565b91505092915050565b6000602082840312156140af57600080fd5b60006140bd84828501613ccf565b91505092915050565b600080604083850312156140d957600080fd5b60006140e785828601613ccf565b925050602083013567ffffffffffffffff81111561410457600080fd5b61411085828601613d0e565b9150509250929050565b60006020828403121561412c57600080fd5b600061413a84828501613ce4565b91505092915050565b60006020828403121561415557600080fd5b600061416384828501613cf9565b91505092915050565b60006020828403121561417e57600080fd5b600082013567ffffffffffffffff81111561419857600080fd5b6141a484828501613d0e565b91505092915050565b6000602082840312156141bf57600080fd5b600082013567ffffffffffffffff8111156141d957600080fd5b6141e584828501613d38565b91505092915050565b60006020828403121561420057600080fd5b600061420e84828501613d8c565b91505092915050565b6000806040838503121561422a57600080fd5b600061423885828601613d8c565b925050602061424985828601613d8c565b9150509250929050565b600061425f8383614283565b60208301905092915050565b60006142778383614a4c565b60208301905092915050565b61428c8161523d565b82525050565b61429b8161523d565b82525050565b6142b26142ad8261523d565b6153aa565b82525050565b60006142c382615093565b6142cd81856150d9565b93506142d88361505e565b8060005b838110156143095781516142f08882614253565b97506142fb836150bf565b9250506001810190506142dc565b5085935050505092915050565b60006143218261509e565b61432b81856150ea565b93506143368361506e565b8060005b8381101561436757815161434e888261426b565b9750614359836150cc565b92505060018101905061433a565b5085935050505092915050565b61437d8161524f565b82525050565b61438c8161525b565b82525050565b6143a361439e8261525b565b6153bc565b82525050565b60006143b4826150a9565b6143be81856150fb565b93506143ce8185602086016152fc565b6143d7816154fe565b840191505092915050565b6143eb816152db565b82525050565b60006143fc826150b4565b614406818561510c565b93506144168185602086016152fc565b61441f816154fe565b840191505092915050565b6000614435826150b4565b61443f818561511d565b935061444f8185602086016152fc565b80840191505092915050565b600081546144688161532f565b614472818661511d565b9450600182166000811461448d576001811461449e576144d1565b60ff198316865281860193506144d1565b6144a78561507e565b60005b838110156144c9578154818901526001820191506020810190506144aa565b838801955050505b50505092915050565b60006144e7601c8361511d565b91507f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000830152601c82019050919050565b600061452760118361510c565b91507f496e76616c6964207369676e61747572650000000000000000000000000000006000830152602082019050919050565b600061456760258361511d565b91507f3c7376672077696474683d22323422206865696768743d22323422207669657760008301527f426f783d220000000000000000000000000000000000000000000000000000006020830152602582019050919050565b60006145cd60198361511d565b91507f53796e7468657469632043727970746f50756e6b20666f7220000000000000006000830152601982019050919050565b600061460d60118361510c565b91507f494e56414c49445f524543495049454e540000000000000000000000000000006000830152602082019050919050565b600061464d60018361511d565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600061468d60028361511d565b91507f227d0000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006146cd60148361510c565b91507f496e73756666696369656e74207061796d656e740000000000000000000000006000830152602082019050919050565b600061470d60348361511d565b91507f222c20226465736372697074696f6e223a202254686973206973206120756e6960008301527f7175652050756e6b20636c61696d6564206279200000000000000000000000006020830152603482019050919050565b600061477360108361510c565b91507f554e534146455f524543495049454e54000000000000000000000000000000006000830152602082019050919050565b60006147b3600a8361511d565b91507f7b226e616d65223a2022000000000000000000000000000000000000000000006000830152600a82019050919050565b60006147f360288361511d565b91507f2e222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c60008301527f3b6261736536342c0000000000000000000000000000000000000000000000006020830152602882019050919050565b6000614859601d8361511d565b91507f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006000830152601d82019050919050565b600061489960148361510c565b91507f4f6666736574206f7574206f6620626f756e64730000000000000000000000006000830152602082019050919050565b60006148d96000836150fb565b9150600082019050919050565b60006148f3602d8361511d565b91507f203234203234223e3c75736520687265663d222373707269746573686565742260008301527f3e3c2f7573653e3c2f7376673e000000000000000000000000000000000000006020830152602d82019050919050565b600061495960188361510c565b91507f696e76616c6964207369676e6174757265206c656e67746800000000000000006000830152602082019050919050565b6000614999600e8361510c565b91507f414c52454144595f4d494e5445440000000000000000000000000000000000006000830152602082019050919050565b60006149d9600e8361510c565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b6000614a19600a8361510c565b91507f57524f4e475f46524f4d000000000000000000000000000000000000000000006000830152602082019050919050565b614a55816152c4565b82525050565b614a64816152c4565b82525050565b614a7b614a76826152c4565b6153d8565b82525050565b614a8a816152ce565b82525050565b6000614a9c82846142a1565b60148201915081905092915050565b6000614ab782856142a1565b601482019150614ac78284614a6a565b6020820191508190509392505050565b6000614ae38284614392565b60208201915081905092915050565b6000614afe828461442a565b915081905092915050565b6000614b15828861442a565b9150614b21828761445b565b9150614b2d828661442a565b9150614b39828561442a565b9150614b45828461442a565b91508190509695505050505050565b6000614b60828661442a565b9150614b6b8261455a565b9150614b77828561442a565b9150614b8282614640565b9150614b8e828461442a565b9150614b99826148e6565b9150819050949350505050565b6000614bb1826144da565b9150614bbd8284614392565b60208201915081905092915050565b6000614bd7826147a6565b9150614be2826145c0565b9150614bee828661442a565b9150614bf982614700565b9150614c05828561442a565b9150614c10826147e6565b9150614c1c828461442a565b9150614c2782614680565b9150819050949350505050565b6000614c3f8261484c565b9150614c4b828461442a565b915081905092915050565b6000602082019050614c6b6000830184614292565b92915050565b6000608082019050614c866000830187614292565b614c936020830186614292565b614ca06040830185614a5b565b8181036060830152614cb281846143a9565b905095945050505050565b6000608082019050614cd26000830186614292565b614cdf6020830185614292565b614cec6040830184614a5b565b8181036060830152614cfd816148cc565b9050949350505050565b60006020820190508181036000830152614d2181846142b8565b905092915050565b60006020820190508181036000830152614d438184614316565b905092915050565b6000602082019050614d606000830184614374565b92915050565b6000602082019050614d7b6000830184614383565b92915050565b6000606082019050614d966000830186614383565b614da36020830185614383565b614db06040830184614a81565b949350505050565b6000608082019050614dcd6000830187614383565b614dda6020830186614a81565b614de76040830185614383565b614df46060830184614383565b95945050505050565b6000602082019050614e1260008301846143e2565b92915050565b60006020820190508181036000830152614e3281846143f1565b905092915050565b60006020820190508181036000830152614e538161451a565b9050919050565b60006020820190508181036000830152614e7381614600565b9050919050565b60006020820190508181036000830152614e93816146c0565b9050919050565b60006020820190508181036000830152614eb381614766565b9050919050565b60006020820190508181036000830152614ed38161488c565b9050919050565b60006020820190508181036000830152614ef38161494c565b9050919050565b60006020820190508181036000830152614f138161498c565b9050919050565b60006020820190508181036000830152614f33816149cc565b9050919050565b60006020820190508181036000830152614f5381614a0c565b9050919050565b6000602082019050614f6f6000830184614a5b565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614f9c57614f9b6154cf565b5b8060405250919050565b600067ffffffffffffffff821115614fc157614fc06154cf565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614fed57614fec6154cf565b5b602082029050602081019050919050565b600067ffffffffffffffff821115615019576150186154cf565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115615049576150486154cf565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000615133826152c4565b915061513e836152c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561517357615172615413565b5b828201905092915050565b6000615189826152c4565b9150615194836152c4565b9250826151a4576151a3615442565b5b828204905092915050565b60006151ba826152c4565b91506151c5836152c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156151fe576151fd615413565b5b828202905092915050565b6000615214826152c4565b915061521f836152c4565b92508282101561523257615231615413565b5b828203905092915050565b6000615248826152a4565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061529f8261551c565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006152e682615291565b9050919050565b82818337600083830152505050565b60005b8381101561531a5780820151818401526020810190506152ff565b83811115615329576000848401525b50505050565b6000600282049050600182168061534757607f821691505b6020821081141561535b5761535a6154a0565b5b50919050565b600061536c826152c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561539f5761539e615413565b5b600182019050919050565b60006153b5826153c6565b9050919050565b6000819050919050565b60006153d18261550f565b9050919050565b6000819050919050565b60006153ed826152c4565b91506153f8836152c4565b92508261540857615407615442565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b6002811061552d5761552c615471565b5b50565b6155398161523d565b811461554457600080fd5b50565b6155508161524f565b811461555b57600080fd5b50565b6155678161525b565b811461557257600080fd5b50565b61557e81615265565b811461558957600080fd5b50565b615595816152c4565b81146155a057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f223e3c2f696d6167653e3c2f7376673e3c2f646566733e3c7376672069643d2270756e6b223e3c7376672076696577426f783d22302030203234203234222077696474683d22313030302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722203e3c646566733e3c7374796c653e237370726974657368656574207b20696d6167652d72656e646572696e673a202d7765626b69742d6f7074696d697a652d636f6e74726173743b20696d6167652d72656e646572696e673a2063726973702d65646765733b20696d6167652d72656e646572696e673a20706978656c617465643b207d202370756e6b207b2066696c7465723a2064726f702d736861646f77283070782030707820353070782072676228302c203235352c203136362c20302e3729293b207d20737667207b206261636b67726f756e64203a20233641393438303b207d3c2f7374796c653e3c7376672077696474683d22323422206865696768743d223234222076696577426f783d2234382030203234203234223e3c696d6167652069643d22737072697465736865657422207072657365727665417370656374526174696f3d22784d696e594d696e20736c6963652220687265663d22a2646970667358221220f14ecf48ea865ee7b7e3baf75672bea4a690d099ff8b7d1390576d66e1ae70b264736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 30,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 41,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 45,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 49,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 55,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 532,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "spritesheetImageData",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 538,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "spritesheetRanges",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_array(t_uint256)4_storage)9_storage"
      },
      {
        "astId": 543,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "attributesContentURI",
        "offset": 0,
        "slot": "43",
        "type": "t_string_storage"
      },
      {
        "astId": 554,
        "contract": "contracts/SyntheticPunks.sol:SyntheticPunks",
        "label": "claimed",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint256)4_storage)9_storage": {
        "base": "t_array(t_uint256)4_storage",
        "encoding": "inplace",
        "label": "uint256[4][9]",
        "numberOfBytes": "1152"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}